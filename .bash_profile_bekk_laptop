# Java

_java_version() {
    local version_path=$1
    if [[ -f $version_path/release ]]; then
        cat $version_path/release | grep "JAVA_VERSION=" | sed -E 's/JAVA_VERSION=|\"//g'
    else
        echo $path
    fi
}

# List current version with "jdk", or change with "jdk 12"
jdk() {
    local version=${1:-""}
    local silent=${2:-false}
    if [[ $version = "" ]]; then
        java -version
    else
        export JAVA_HOME=$(/usr/libexec/java_home -v"$version");
        if [[ $silent = false ]]; then
            java -version
        fi
    fi
}

jdks() {
    echo "Java versions"
    /usr/libexec/java_home -V 2>&1 | sed 1d | sed '$d' | cut -d, -f1
    echo "Global: $(_java_version $(/usr/libexec/java_home))"
    if [[ ! -z $JAVA_HOME ]]; then
        echo "Local:  $(_java_version $JAVA_HOME)"
    fi
}


function randomBookNote {
    curl -s https://app.amosti.net/reading/api/notes/random | jq '(.note) + " - " + (.authors[0]) + ", " + (.title)'
}

d() { 
    cd $(find ~/Dev -type d -maxdepth 1 | fzf) 
}


tf-fmt() {
    # Select a directory using fzf (default to the current directory if nothing selected)
    DIR=$(find . -type d | fzf)

    # Check if a directory was selected
    if [[ -n "$DIR" ]]; then
        # Recursively find and format all .tf files in the selected directory
        find "$DIR" -type f -name "*.tf" -exec terraform fmt {} \;
    else
        echo "No directory selected."
    fi
}

eval "$(/opt/homebrew/bin/brew shellenv)"

# Nix
if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
    . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
fi
# End Nix

# Kubernetes stuff
mkdir -p $HOME/.kubectl-plugins
export PATH="$HOME/.kubectl-plugins:$PATH"

export PATH=$PATH:/Users/andreasmosti/.dotnet/tools

# Volta to handle node versions
export VOLTA_HOME=$HOME/.volta
export PATH=$PATH:$VOLTA_HOME/bin

# To make sure nix is first on path
export PATH="$HOME/.nix-profile/bin:/nix/var/nix/profiles/default/bin:$PATH"

# direnv

eval "$(direnv hook bash)"

